mofa_entrypoint$parse_intercept()
# Train the model
mofa_entrypoint$train_model()
# Save the model
sample_names <- colnames(getTrainData(object)[[1]])
feature_names <- unname(lapply(getTrainData(object),rownames))
mofa_entrypoint$save_model(
outfile, sample_names=sample_names, feature_names=feature_names
)
# Load the model back into R
object <- loadModel(outfile, object)
#TO BE FIXED: Workaround as numFactors is not saved in ModelOpts
ModelOptions(object)$numFactors <- numFactors
return(object)
}
getwd()
## ----message=FALSE------------------------------------------------------------
library(data.table)
library(MOFA2)
## -----------------------------------------------------------------------------
data <- make_example_data(
n_views = 2,
n_samples = 200,
n_features = 1000,
n_factors = 10
)[[1]]
lapply(data,dim)
## ----message=FALSE------------------------------------------------------------
MOFAobject <- create_mofa(data)
## -----------------------------------------------------------------------------
plot_data_overview(MOFAobject)
## ----message=FALSE------------------------------------------------------------
N = ncol(data[[1]])
groups = c(rep("A",N/2), rep("B",N/2))
MOFAobject <- create_mofa(data, groups=groups)
## -----------------------------------------------------------------------------
plot_data_overview(MOFAobject)
## -----------------------------------------------------------------------------
filepath <- system.file("extdata", "test_data.RData", package = "MOFA2")
load(filepath)
head(dt)
## -----------------------------------------------------------------------------
MOFAobject <- create_mofa(dt)
print(MOFAobject)
## ----out.width = "80%"--------------------------------------------------------
plot_data_overview(MOFAobject)
## -----------------------------------------------------------------------------
data_opts <- get_default_data_options(MOFAobject)
head(data_opts)
## -----------------------------------------------------------------------------
model_opts <- get_default_model_options(MOFAobject)
model_opts$num_factors <- 10
head(model_opts)
## -----------------------------------------------------------------------------
train_opts <- get_default_training_options(MOFAobject)
head(train_opts)
## ----message=FALSE------------------------------------------------------------
MOFAobject <- prepare_mofa(
object = MOFAobject,
data_options = data_opts,
model_options = model_opts,
training_options = train_opts
)
## -----------------------------------------------------------------------------
outfile = file.path(getwd(),"model.hdf5")
MOFAobject.trained <- run_mofa(MOFAobject, outfile)
## -----------------------------------------------------------------------------
sessionInfo()
filepath <- system.file("extdata", "data.txt", package = "MOFA2")
load(filepath)
## -----------------------------------------------------------------------------
filepath <- system.file("extdata", "data.txt.gz", package = "MOFA2")
load(filepath)
filepath <- system.file("extdata", "test_data.RData", package = "MOFA2")
load(filepath)
filepath <- system.file("extdata", "data.RData", package = "MOFA2")
load(filepath)
<iframe width='400' height='440' src='https://rdrr.io/snippets/embed/' frameborder='0'></iframe>
shiny::runApp('D:/Graduation Project/New2/Compressed/mofaplus-shiny-master/app')
runApp('D:/Graduation Project/code')
runApp('D:/Graduation Project/code')
runApp('D:/Graduation Project/code')
runApp('D:/Graduation Project/code')
runApp('D:/Graduation Project/code')
runApp('D:/Graduation Project/code')
# Load data (in data.frame format)
file <- system.file("extdata", "test_data.RData", package = "MOFA2")
load(file)
# Create the MOFA object
MOFAmodel <- create_mofa(dt)
# Prepare the MOFA object with default options
MOFAmodel <- prepare_mofa(MOFAmodel)
# Run the MOFA model
## Not run:  MOFAmodel <- run_mofa(MOFAmodel, use_basilisk = TRUE)
# Load data (in data.frame format)
file <- system.file("extdata", "test_data.RData", package = "MOFA2")
load(file)
# Create the MOFA object
MOFAmodel <- create_mofa(dt)
# Prepare the MOFA object with default options
MOFAmodel <- prepare_mofa(MOFAmodel)
# Run the MOFA model
## Not run:  MOFAmodel <- run_mofa(MOFAmodel, use_basilisk = TRUE)
getwd()
## Not run:  MOFAmodel <- run_mofa(MOFAmodel, use_basilisk = TRUE)
runApp('D:/Graduation Project/code')
## ----message=FALSE------------------------------------------------------------
library(data.table)
library(MOFA2)
## -----------------------------------------------------------------------------
data <- make_example_data(
n_views = 2,
n_samples = 200,
n_features = 1000,
n_factors = 10
)[[1]]
lapply(data,dim)
## ----message=FALSE------------------------------------------------------------
MOFAobject <- create_mofa(data)
## -----------------------------------------------------------------------------
plot_data_overview(MOFAobject)
## ----message=FALSE------------------------------------------------------------
N = ncol(data[[1]])
groups = c(rep("A",N/2), rep("B",N/2))
MOFAobject <- create_mofa(data, groups=groups)
## -----------------------------------------------------------------------------
plot_data_overview(MOFAobject)
## -----------------------------------------------------------------------------
dt = fread("data.txt.gz")
#filepath <- system.file("extdata", "test_data.RData", package = "MOFA2")
#load(filepath)
head(dt)
dt[,group:=NULL]
## -----------------------------------------------------------------------------
MOFAobject <- create_mofa(dt)
print(MOFAobject)
## ----out.width = "80%"--------------------------------------------------------
plot_data_overview(MOFAobject)
## -----------------------------------------------------------------------------
data_opts <- get_default_data_options(MOFAobject)
head(data_opts)
## -----------------------------------------------------------------------------
model_opts <- get_default_model_options(MOFAobject)
model_opts$num_factors <- 10
head(model_opts)
## -----------------------------------------------------------------------------
train_opts <- get_default_training_options(MOFAobject)
head(train_opts)
## ----message=FALSE------------------------------------------------------------
MOFAobject <- prepare_mofa(
object = MOFAobject,
data_options = data_opts,
model_options = model_opts,
training_options = train_opts
)
## -----------------------------------------------------------------------------
outfile = file.path(getwd(),"model.hdf5")
MOFAobject.trained <- run_mofa(MOFAobject, outfile)
## -----------------------------------------------------------------------------
sessionInfo()
shiny::runApp('D:/Graduation Project/code')
runApp('D:/Graduation Project/code')
runApp('D:/Graduation Project/code')
runApp('D:/Graduation Project/code')
runApp('D:/Graduation Project/code')
runApp('D:/Graduation Project/code')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
reticulate::py_config()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp('D:/Graduation Project/New2/Compressed/mofaplus-shiny-master/app')
runApp('D:/Graduation Project/New2/Compressed/mofaplus-shiny-master/app')
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(data.table)
library(purrr)
library(ggplot2)
library(ggpubr)
library(ggrepel)
# MOFA
library(MOFA2)
mefisto <- readRDS("scnmt_mefisto_model.rds")
r2 <- get_variance_explained(mefisto, views="RNA")[["r2_per_factor"]][[1]]
factors <- names(which(r2[,"RNA"]>1))
mefisto <- subset_factors(mefisto, factors)
mefisto
plot_variance_explained(mefisto, x="view", y="factor", max_r2 = 9)
plot_smoothness <- function(object, factors = "all", color = "cadetblue") {
# Sanity checks
if (!is(object, "MOFA")) stop("'object' has to be an instance of MOFA")
# Define factors
factors <- .check_and_get_factors(object, factors)
# Get scale parameters
ss <- get_scales(object)[factors]
df <- data.frame(factor = names(ss), smooth = ss, non_smooth = 1- ss)
df$factor <- factor(df$factor, levels=factors)
df <- gather(df, -factor, key = "smoothness", value = "value")
gg_bar <- ggplot(df, aes(x= 1, y = value, fill = smoothness)) +
geom_bar(stat="identity") +
facet_wrap(~factor, nrow = 1) +
theme_void() + coord_flip() +
guides(fill=FALSE) + scale_fill_manual(values = c("non_smooth" = "gray", "smooth" = color)) +
geom_text(x=1, y = 0.5, label = "smoothness", size = 3)
return(gg_bar)
}
plot_smoothness(mefisto)
plot_smoothness <- function(object, factors = "all", color = "cadetblue") {
# Sanity checks
if (!is(object, "MOFA")) stop("'object' has to be an instance of MOFA")
# Get scale parameters
ss <- get_scales(object)[factors]
df <- data.frame(factor = names(ss), smooth = ss, non_smooth = 1- ss)
df$factor <- factor(df$factor, levels=factors)
df <- gather(df, -factor, key = "smoothness", value = "value")
gg_bar <- ggplot(df, aes(x= 1, y = value, fill = smoothness)) +
geom_bar(stat="identity") +
facet_wrap(~factor, nrow = 1) +
theme_void() + coord_flip() +
guides(fill=FALSE) + scale_fill_manual(values = c("non_smooth" = "gray", "smooth" = color)) +
geom_text(x=1, y = 0.5, label = "smoothness", size = 3)
return(gg_bar)
}
plot_smoothness(mefisto)
plot_smoothness <- function(object, factors = "all", color = "cadetblue") {
# Sanity checks
if (!is(object, "MOFA")) stop("'object' has to be an instance of MOFA")
gg_bar <- ggplot(object, aes(x= 1, y = value, fill = smoothness)) +
geom_bar(stat="identity") +
facet_wrap(~factor, nrow = 1) +
theme_void() + coord_flip() +
guides(fill=FALSE) + scale_fill_manual(values = c("non_smooth" = "gray", "smooth" = color)) +
geom_text(x=1, y = 0.5, label = "smoothness", size = 3)
return(gg_bar)
}
plot_smoothness(mefisto)
plot_smoothness <- function(object, factors = "all", color = "cadetblue") {
# Sanity checks
if (!is(object, "MOFA")) stop("'object' has to be an instance of MOFA")
mefisto <- readRDS(object)
gg_bar <- ggplot(mefisto, aes(x= 1, y = value, fill = smoothness)) +
geom_bar(stat="identity") +
facet_wrap(~factor, nrow = 1) +
theme_void() + coord_flip() +
guides(fill=FALSE) + scale_fill_manual(values = c("non_smooth" = "gray", "smooth" = color)) +
geom_text(x=1, y = 0.5, label = "smoothness", size = 3)
return(gg_bar)
}
plot_smoothness(mefisto)
plot_smoothness("scnmt_mefisto_model.rds")
plot_smoothness <- function(object, factors = "all", color = "cadetblue") {
mefisto <- readRDS(object)
gg_bar <- ggplot(mefisto, aes(x= 1, y = value, fill = smoothness)) +
geom_bar(stat="identity") +
facet_wrap(~factor, nrow = 1) +
theme_void() + coord_flip() +
guides(fill=FALSE) + scale_fill_manual(values = c("non_smooth" = "gray", "smooth" = color)) +
geom_text(x=1, y = 0.5, label = "smoothness", size = 3)
return(gg_bar)
}
plot_smoothness("scnmt_mefisto_model.rds")
plot_smoothness <- function(object, factors = "all", color = "cadetblue") {
# Sanity checks
if (!is(object, "MOFA")) stop("'object' has to be an instance of MOFA")
df <- data.frame(object)
gg_bar <- ggplot(df, aes(x= 1, y = value, fill = smoothness)) +
geom_bar(stat="identity") +
facet_wrap(~factor, nrow = 1) +
theme_void() + coord_flip() +
guides(fill=FALSE) + scale_fill_manual(values = c("non_smooth" = "gray", "smooth" = color)) +
geom_text(x=1, y = 0.5, label = "smoothness", size = 3)
return(gg_bar)
}
plot_smoothness(mefisto)
library(data.table)
library(purrr)
library(ggplot2)
library(ggpubr)
library(ggrepel)
# MOFA
library(MOFA2)
mefisto <- readRDS("scnmt_mefisto_model.rds")
r2 <- get_variance_explained(mefisto, views="RNA")[["r2_per_factor"]][[1]]
factors <- names(which(r2[,"RNA"]>1))
mefisto <- subset_factors(mefisto, factors)
mefisto
plot_variance_explained(mefisto, x="view", y="factor", max_r2 = 9)
plot_smoothness(mefisto)
mefisto <- readRDS("scnmt_mefisto_model.rds")
r2 <- get_variance_explained(mefisto, views="RNA")[["r2_per_factor"]][[1]]
factors <- names(which(r2[,"RNA"]>1))
mefisto <- subset_factors(mefisto, factors)
mefisto
plot_variance_explained(mefisto, x="view", y="factor", max_r2 = 9)
plot_smoothness(mefisto)
library(data.table)
library(purrr)
library(ggplot2)
library(ggpubr)
library(ggrepel)
# MOFA
library(MOFA2)
mefisto <- readRDS("scnmt_mefisto_model.rds")
r2 <- get_variance_explained(mefisto, views="RNA")[["r2_per_factor"]][[1]]
factors <- names(which(r2[,"RNA"]>1))
mefisto <- subset_factors(mefisto, factors)
mefisto
plot_variance_explained(mefisto, x="view", y="factor", max_r2 = 9)
plot_smoothness(mefisto)
View(plot_smoothness)
View(plot_smoothness)
library(data.table)
library(purrr)
library(ggplot2)
library(ggpubr)
library(ggrepel)
# MOFA
library(MOFA2)
sample_metadata <- fread("scnmt_sample_metadata.txt")
colnames(sample_metadata)
factors.dt <- get_factors(mefisto, factors=c(1,3,4))[[1]] %>%
as.data.table(keep.rownames = T) %>%
setnames("rn","sample")
to.plot <- sample_metadata[,c("sample","UMAP1","UMAP2")] %>%
merge(factors.dt, by="sample") %>%
melt(id.vars=c("UMAP1","UMAP2","sample"), variable.name="factor") %>%
.[,value:=value/max(abs(value)),by="factor"]
ggscatter(to.plot, x="UMAP1", y="UMAP2", fill="value", shape=21, stroke=0.15) +
facet_wrap(~factor) +
scale_fill_gradient2(low = "gray50", mid="gray90", high = "red") +
theme_classic() +
ggplot_theme_NoAxes()
factors.dt <- get_factors(mefisto, factors=c(1,3,4))[[1]] %>%
as.data.table(keep.rownames = T) %>%
setnames("rn","sample")
to.plot <- sample_metadata[,c("sample","UMAP1","UMAP2")] %>%
merge(factors.dt, by="sample") %>%
melt(id.vars=c("UMAP1","UMAP2","sample"), variable.name="factor") %>%
.[,value:=value/max(abs(value)),by="factor"]
ggscatter(to.plot, x="UMAP1", y="UMAP2", fill="value", shape=21, stroke=0.15) +
facet_wrap(~factor) +
scale_fill_gradient2(low = "gray50", mid="gray90", high = "red") +
theme_classic() +
ggplot2:: theme_classic()
factors.dt <- get_factors(mefisto, factors=c(1,3,4))[[1]] %>%
as.data.table(keep.rownames = T) %>%
setnames("rn","sample")
to.plot <- sample_metadata[,c("sample","UMAP1","UMAP2")] %>%
merge(factors.dt, by="sample") %>%
melt(id.vars=c("UMAP1","UMAP2","sample"), variable.name="factor") %>%
.[,value:=value/max(abs(value)),by="factor"]
ggscatter(to.plot, x="UMAP1", y="UMAP2", fill="value", shape=21, stroke=0.15) +
facet_wrap(~factor) +
scale_fill_gradient2(low = "gray50", mid="gray90", high = "red") +
theme_classic() +
ggplot2:: theme_bw()
plot_smoothness(mefisto)
library(data.table)
library(purrr)
library(ggplot2)
library(ggpubr)
library(ggrepel)
# MOFA
library(MOFA2)
sample_metadata <- fread("scnmt_sample_metadata.txt")
colnames(sample_metadata)
plot_smoothness(mefisto)
factors.dt <- get_factors(mefisto, factors=c(1,3,4))[[1]] %>%
as.data.table(keep.rownames = T) %>%
setnames("rn","sample")
to.plot <- sample_metadata[,c("sample","UMAP1","UMAP2")] %>%
merge(factors.dt, by="sample") %>%
melt(id.vars=c("UMAP1","UMAP2","sample"), variable.name="factor") %>%
.[,value:=value/max(abs(value)),by="factor"]
ggscatter(to.plot, x="UMAP1", y="UMAP2", fill="value", shape=21, stroke=0.15) +
facet_wrap(~factor) +
scale_fill_gradient2(low = "gray50", mid="gray90", high = "red") +
theme_classic() +
ggplot2:: theme_bw()
sample_metadata <- fread("scnmt_sample_metadata.txt")
colnames(sample_metadata)
factors.dt <- get_factors(mefisto, factors=c(1,3,4))[[1]] %>%
as.data.table(keep.rownames = T) %>%
setnames("rn","sample")
to.plot <- sample_metadata[,c("sample","UMAP1","UMAP2")] %>%
merge(factors.dt, by="sample") %>%
melt(id.vars=c("UMAP1","UMAP2","sample"), variable.name="factor") %>%
.[,value:=value/max(abs(value)),by="factor"]
ggscatter(to.plot, x="UMAP1", y="UMAP2", fill="value", shape=21, stroke=0.15) +
facet_wrap(~factor) +
scale_fill_gradient2(low = "gray50", mid="gray90", high = "red") +
theme_classic() +
ggplot2:: theme_bw()
mefisto <- run_mofa(mefisto)
mefisto <- readRDS("scnmt_mefisto_model.rds")
r2 <- get_variance_explained(mefisto, views="RNA")[["r2_per_factor"]][[1]]
factors <- names(which(r2[,"RNA"]>1))
mefisto <- subset_factors(mefisto, factors)
mefisto
plot_variance_explained(mefisto, x="view", y="factor", max_r2 = 9)
factors.dt <- get_factors(mefisto, factors=c(1,3,4))[[1]] %>%
as.data.table(keep.rownames = T) %>%
setnames("rn","sample")
to.plot <- sample_metadata[,c("sample","UMAP1","UMAP2")] %>%
merge(factors.dt, by="sample") %>%
melt(id.vars=c("UMAP1","UMAP2","sample"), variable.name="factor") %>%
.[,value:=value/max(abs(value)),by="factor"]
ggscatter(to.plot, x="UMAP1", y="UMAP2", fill="value", shape=21, stroke=0.15) +
facet_wrap(~factor) +
scale_fill_gradient2(low = "gray50", mid="gray90", high = "red") +
theme_classic() +
ggplot2:: theme_bw()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("keras")
install.packages("shinyjs")
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(data.table)
library(purrr)
library(ggplot2)
library(ggpubr)
library(ggrepel)
# MOFA
library(MOFA2)
dt = fread("data.txt")
dt = fread("data.txt")
dt = fread("data.txt")
dt %>% ggplot(aes(x = Test1, y = Test2, color = factor(Label))) + geom_point(size = 4, shape = 19, alpha = 0.6) +
scale_colour_manual(values = cols,labels = c("Failed", "Passed"),name="Test Result")
dt %>% ggplot(aes(x = view, y = group, color = factor(value))) + geom_point(size = 4, shape = 19, alpha = 0.6) +
scale_colour_manual(values = cols,labels = c("Failed", "Passed"),name="Test Result")
dt %>% ggplot(aes(x = view, y = group, color = factor(value))) + geom_point(size = 4, shape = 19, alpha = 0.6) +
scale_colour_manual(values = cols,labels = c("Failed", "Passed"),name="Test Result")
dt %>% ggplot(aes(x = view, y = group, color = factor(factor))) + geom_point(size = 4, shape = 19, alpha = 0.6) +
scale_colour_manual(values = cols,labels = c("Failed", "Passed"),name="Test Result")
dt %>% ggplot(aes(x = view, y = group, color = factor(value))) + geom_point(size = 4, shape = 19, alpha = 0.6) +
scale_colour_manual(values = cols,labels = c("Failed", "Passed"),name="Test Result")
dt %>% ggplot(aes(x = sample, y = group, color = factor(value))) + geom_point(size = 4, shape = 19, alpha = 0.6) +
scale_colour_manual(values = cols,labels = c("Failed", "Passed"),name="Test Result")
dt %>% ggplot(aes(x = sample, y = view, color = factor(value))) + geom_point(size = 4, shape = 19, alpha = 0.6) +
scale_colour_manual(values = cols,labels = c("Failed", "Passed"),name="Test Result")
dt %>% ggplot(aes(x = sample, y = view, color = factor(feature))) + geom_point(size = 4, shape = 19, alpha = 0.6) +
scale_colour_manual(values = cols,labels = c("Failed", "Passed"),name="Test Result")
dt %>% ggplot(aes(x = sample, y = view)) + geom_point(size = 4, shape = 19, alpha = 0.6) +
scale_colour_manual(values = cols,labels = c("Failed", "Passed"),name="Test Result")
ggplot2::aes(x = sample, y = view)
ggplot2::aes(x = sample, y = view) + geom_point(size = 4, shape = 19, alpha = 0.6) +
scale_colour_manual(values = cols,labels = c("Failed", "Passed"),name="Test Result")
ggplot2::aes(dt, x = sample, y = view) + geom_point(size = 4, shape = 19, alpha = 0.6) +
scale_colour_manual(values = cols,labels = c("Failed", "Passed"),name="Test Result")
dt %>% ggplot2::(aes(x = sample, y = view)) + geom_point(size = 4, shape = 19, alpha = 0.6) +
scale_colour_manual(values = cols,labels = c("Failed", "Passed"),name="Test Result")
ggplot2::theme_gray()
dt %>% ggplot(aes(x = sample, y = view)) + geom_point(size = 4, shape = 19, alpha = 0.6) +
scale_colour_manual(values = cols,labels = c("Failed", "Passed"),name="Test Result")
dt %>% ggplot(aes(x = sample, y = group)) + geom_point(size = 4, shape = 19, alpha = 0.6) +
scale_colour_manual(values = cols,labels = c("Failed", "Passed"),name="Test Result")
shiny::runApp()
shiny::runApp()
